import telebot
from telebot import types
import gpt
from config import TOKEN
import os
import time


user_messages_history = {}
user_settings = {}
bot = telebot.TeleBot(TOKEN)
log_file_path = "C:/Users/User/PycharmProjects/pythonProject6/pythonProject/–ø–µ—Ä–µ–≤–æ–¥/error_logs.txt"
last_generated_response = ""

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ä–∏—Ñ–º—É.ü§ó\n\n"
                    "–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–∏–Ω–æ–≤")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"))
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
def settings(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
    bot.register_next_step_handler(msg, set_tokens)

def set_tokens(message):
    chat_id = message.chat.id
    try:
        tokens = int(message.text)
        user_settings[chat_id] = tokens
        bot.reply_to(message, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tokens}")
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")
    except ValueError:
        msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(msg, set_tokens)

@bot.message_handler(commands=['debug'])
def send_debug_logs(message):
    allowed_users = ['KOKOS_uc']
    if message.from_user.username in allowed_users:
        if os.path.exists(log_file_path) and os.path.getsize(log_file_path) > 0:
            with open(log_file_path, "rb") as file:
                bot.send_document(message.chat.id, file)
        else:
            bot.reply_to(message, "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(commands=['reset'])
def reset_chat_history(message):
    chat_id = message.chat.id
    user_messages_history[chat_id] = []
    bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.ü§ó")

def process_user_message(chat_id, text):
    global last_generated_response
    response = "–û—Ç–≤–µ—Ç –ò–ò –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    last_generated_response = response
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ ‚è≥")
    bot.send_message(chat_id, response)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_messages_history:
        user_messages_history[chat_id] = []
    user_messages_history[chat_id].append(message.text)
    process_user_message(chat_id, message.text)

@bot.message_handler(func=lambda message: True)
def handle_non_text(message):
    bot.reply_to(message, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.üòì")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    if chat_id not in user_messages_history:
        user_messages_history[chat_id] = []
    user_messages_history[chat_id].append(message.text)
    process_user_message(chat_id, message.text)


def process_user_message(chat_id, text):
    global last_generated_response
    messages_context = " ".join(user_messages_history[chat_id][-5:])
    tokens = user_settings.get(chat_id, 200)
    message = bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ ‚è≥")
    time.sleep(1)
    last_generated_response = gpt.generate_response(messages_context, tokens=tokens)
    bot.edit_message_text(last_generated_response, chat_id, message.message_id)
    send_continuation_buttons(chat_id)

def send_continuation_buttons(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π"), types.KeyboardButton("/reset"))
    bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å ?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π")
def handle_continue(message):
    chat_id = message.chat.id
    process_user_message(chat_id, last_generated_response)

if __name__ == '__main__':
    bot.infinity_polling()
