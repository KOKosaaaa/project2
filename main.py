import telebot
from telebot import types
from config import TOKEN
import time
from gpt import generate_response
import os
bot = telebot.TeleBot(TOKEN)
last_generated_response = {}
user_settings = {}
log_file_path = "C:/Users/User/PycharmProjects/pythonProject6/pythonProject/–ø–µ—Ä–µ–≤–æ–¥/error_logs.txt"
user_messages_history = {}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
                    "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text) for text in ["–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤", "–ü—Ä–æ–¥–æ–ª–∂–∏", "–°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç"]]
    markup.add(*buttons)
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['debug'])
def send_debug_logs(message):
    allowed_users = ['KOKOS_uc']
    if message.from_user.username in allowed_users:
        if os.path.exists(log_file_path) and os.path.getsize(log_file_path) > 0:
            with open(log_file_path, "rb") as file:
                bot.send_document(message.chat.id, file)
        else:
            bot.reply_to(message, "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(commands=['reset'])
def reset_chat_history(message):
    chat_id = message.chat.id
    user_messages_history[chat_id] = []
    bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.ü§ó")

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
def settings(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
    bot.register_next_step_handler(msg, set_tokens)

def set_tokens(message):
    chat_id = message.chat.id
    try:
        tokens = int(message.text)
        user_settings[chat_id] = tokens
        bot.reply_to(message, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tokens}")
    except ValueError:
        msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(msg, set_tokens)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏")
def handle_continue(message):
    chat_id = message.chat.id
    if chat_id in last_generated_response and last_generated_response[chat_id]:
        modified_response = f"{last_generated_response[chat_id]} –ü—Ä–æ–¥–æ–ª–∂–∏"
        bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        new_response = generate_response(modified_response, tokens=user_settings.get(chat_id, 200))
        last_generated_response[chat_id] = new_response
        bot.send_message(chat_id, new_response)
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.text == "–°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç")
def reset_chat_history(message):
    chat_id = message.chat.id
    if chat_id in last_generated_response:
        last_generated_response[chat_id] = ""
    bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.ü§ó")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    wait_message = bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")

    for i in range(1, 6):
        dot_count = i % 4
        time.sleep(2)
        bot.edit_message_text(chat_id=chat_id, message_id=wait_message.message_id,
                              text=f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞{'.' * dot_count}")

    response = generate_response(message.text, tokens=user_settings.get(chat_id, 200))
    bot.edit_message_text(chat_id=chat_id, message_id=wait_message.message_id, text=response)
    last_generated_response[chat_id] = response

if __name__ == '__main__':
    bot.infinity_polling()
